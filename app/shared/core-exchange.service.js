"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const http_1 = require("@angular/http");
const Rx_1 = require("rxjs/Rx");
const operators_1 = require("rxjs/operators");
require("rxjs/add/observable/empty");
require("rxjs/add/operator/map");
const configData = require("../app.config.json");
const config = configData;
const hmacSha512 = require('../libs/sha-mac256.js');
const ccxt = require("../libs/cctxes5/ccxt.js");
let CoreExchange = class CoreExchange {
    constructor(http) {
        this.http = http;
        // Todo: move this to config
        this.opts = {
            baseUrl: 'https://bittrex.com/api/v1.1',
            baseUrlv2: 'https://bittrex.com/Api/v2.0',
            websockets_baseurl: 'wss://socket.bittrex.com/signalr',
            websockets_hubs: ['CoreHub'],
            apikey: config.Exchanges.bittrex.key,
            apisecret: config.Exchanges.bittrex.secret,
            verbose: false,
            cleartext: false,
            stream: false,
            inverse_callback_arguments: false
        };
        this.markets = [];
        this.btcTickers = [];
        this.exchange = new ccxt.bittrex();
        this.exchange.apiKey = config.Exchanges.bittrex.key;
        this.exchange.secret = config.Exchanges.bittrex.secret;
        this.exchange.userAgent = "Exchange mobile app";
    }
    apiCredentials(uri) {
        const options = {
            apikey: this.opts.apikey,
            nonce: this.getNonce()
        };
        return this.setRequestUriGetParams(uri, options);
    }
    setRequestUriGetParams(uri, options) {
        const o = Object.keys(options);
        let op;
        let i;
        if (typeof (uri) === 'object') {
            op = uri;
            uri = op.uri;
        }
        else {
            op = Object.assign({}, config.defaultRequestOptions);
        }
        for (i = 0; i < o.length; i++) {
            uri = this.updateQueryStringParameter(uri, o[i], options[o[i]]);
        }
        op.headers.apisign = hmacSha512.HmacSHA512(uri, this.opts.apisecret);
        // setting the HMAC hash `apisign` http header
        op.uri = uri;
        return op;
    }
    updateQueryStringParameter(uri, key, value) {
        const re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
        const separator = uri.indexOf('?') !== -1 ? "&" : "?";
        if (uri.match(re)) {
            uri = uri.replace(re, '$1' + key + "=" + value + '$2');
        }
        else {
            uri = uri + separator + key + "=" + value;
        }
        return uri;
    }
    getNonce() {
        return Math.floor(new Date().getTime() / 1000);
    }
    sendRequestCallback(callback, op) {
        const start = Date.now();
        const headers = new http_1.Headers();
        const authToken = op.headers.apisign;
        headers.append('Content-Type', 'application/x-www-form-urlencoded');
        headers.append('User-Agent', 'Mozilla/4.0 (compatible;)');
        headers.append('apisign', `${authToken}`);
        const options = new http_1.RequestOptions({ headers });
        return this.http.get(op.uri, options)
            .pipe(operators_1.map((response) => {
            if (!response.json().success) {
                throw new Error(response.json().message);
            }
            return response.json().result;
        }), operators_1.catchError((err) => {
            // Todo: implement HttpInterceptor
            // Currently passing errors down the stream to handle
            return Rx_1.Observable.throw(new Error(err.message));
        }));
    }
    sendCustomRequest(requestString, callback, credentials) {
        let op;
        if (credentials === true) {
            op = this.apiCredentials(requestString);
        }
        else {
            op = Object.assign({}, config.defaultRequestOptions, { uri: requestString });
        }
        this.sendRequestCallback(callback, op);
    }
    credentialApiCall(url, callback, options) {
        if (options) {
            options = this.setRequestUriGetParams(this.apiCredentials(url), options);
        }
        return this.sendRequestCallback(callback, options);
    }
    balanceCallback(arg) {
        //
    }
    getBalances() {
        return Rx_1.Observable.fromPromise(this.fetchBalance());
        // return this.credentialApiCall(this.opts.baseUrl + '/account/getbalances', this.balanceCallback, {});
    }
    buyLimit(marketOptions, context) {
        return this.credentialApiCall(this.opts.baseUrl + '/market/buylimit', this.balanceCallback, { market: marketOptions.MarketName, quantity: marketOptions.quantity, rate: marketOptions.rate })
            .pipe(operators_1.catchError((err) => {
            const message = err.message;
            context.showPoolingModal(err.message, 'Error/Buy limit');
            // Todo: is this the best way to prevent from killing the stream
            return Rx_1.Observable.empty();
        }));
    }
    sellLimit(marketOptions, context) {
        return this.credentialApiCall(this.opts.baseUrl + '/market/selllimit', this.balanceCallback, { market: marketOptions.MarketName, quantity: marketOptions.quantity, rate: marketOptions.rate })
            .pipe(operators_1.catchError((err) => {
            const message = err.message;
            context.showPoolingModal(err.message, 'Error /Sell limit:');
            return Rx_1.Observable.empty();
        }));
    }
    ordersHistory() {
        return Rx_1.Observable.fromPromise(this.fetchOrders());
    }
    marketHistory(market) {
        return this.http.get(`${this.opts.baseUrl}/public/getmarkethistory?market=${market}`)
            .map((response) => response.json().result);
    }
    getOrder(uuid) {
        return this.credentialApiCall(this.opts.baseUrl + '/account/getorder', this.balanceCallback, { uuid });
    }
    getOpenOrders(context) {
        return Rx_1.Observable.fromPromise(this.fetchOpenOrders(context));
    }
    getTicker(pairSymbol, context) {
        return this.http.get(this.opts.baseUrl + `/public/getticker?market=${pairSymbol}`)
            .pipe(operators_1.map((res) => res.json()), 
        // Todo: Error res.result.Bid is undef.. - happens sometimes
        operators_1.map((res) => res.result.Bid), operators_1.catchError((err) => {
            const message = err.message;
            context.showPoolingModal(err.message, 'Error /GetTicker');
            return Rx_1.Observable.empty();
        }));
    }
    fetchOHLCV(symbol) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.exchange.fetchOHLCV(symbol);
        });
    }
    fetchCandles(symbol, timeframe, since = "", limit = "", params = {}) {
        return Rx_1.Observable.fromPromise(this.exchange.fetchOHLCV(symbol, timeframe));
    }
    fetchOrders() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const orders = yield this.exchange.fetchOrders();
                return orders;
            }
            catch (e) {
                alert(e);
            }
        });
    }
    uniCancelOrder(id, context) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const confirmation = yield this.exchange.cancelOrder(id);
                return confirmation;
            }
            catch (e) {
                context.showPoolingModal(e.message, 'Error /Fetch Open Orders');
            }
        });
    }
    cancelOrder(id, context) {
        return Rx_1.Observable.fromPromise(this.uniCancelOrder(id, context));
    }
    fetchOpenOrders(context) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const orders = yield this.exchange.fetchOpenOrders();
                return orders;
            }
            catch (e) {
                context.showPoolingModal(e.message, 'Error /Fetch Open Orders');
            }
        });
    }
    createOrder(params, context) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const order = yield this.exchange.create_order(params.symbol, params.orderType, params.side, params.quantity, params.rate);
                order["quantity"] = params.quantity;
                return order;
            }
            catch (e) {
                alert("Pleae try again");
            }
        });
    }
    fetchBalance() {
        return __awaiter(this, void 0, void 0, function* () {
            const balance = yield this.exchange.fetch_balance();
            return balance;
        });
    }
    fetchTicker(symbol) {
        return __awaiter(this, void 0, void 0, function* () {
            const ticker = yield (this.exchange.fetchTicker(symbol));
            return ticker;
        });
    }
    fetchTickers() {
        return __awaiter(this, void 0, void 0, function* () {
            const tickers = yield (this.exchange.fetchTickers());
            Object.keys(tickers).forEach((ticker, i) => {
                this.btcTickers[i] = tickers[ticker];
            });
            return this.btcTickers;
        });
    }
    getMarkets(context) {
        return Rx_1.Observable.fromPromise(this.fetchTickers());
    }
    getMarket(ticker, context) {
        return Rx_1.Observable.fromPromise(this.fetchTicker(ticker));
    }
};
CoreExchange = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], CoreExchange);
exports.CoreExchange = CoreExchange;
//# sourceMappingURL=data:application/json;base64,