"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const sidedrawer_1 = require("nativescript-pro-ui/sidedrawer");
const angular_1 = require("nativescript-pro-ui/sidedrawer/angular");
const page_1 = require("ui/page");
const router_1 = require("@angular/router");
const dialogs_1 = require("nativescript-angular/directives/dialogs");
const market_confirmation_modal_1 = require("./market-confirmation-modal/market-confirmation-modal");
require("rxjs/add/observable/combineLatest");
const shared_1 = require("../shared");
const webViewInterfaceModule = require('nativescript-webview-interface');
let MarketComponent = class MarketComponent {
    constructor(router, activatedRoute, pooling, core, watchService, exchange, modal, vcRef, page) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.pooling = pooling;
        this.core = core;
        this.watchService = watchService;
        this.exchange = exchange;
        this.modal = modal;
        this.vcRef = vcRef;
        this.page = page;
        this.isOpen = 0;
        this.isBuySelected = true;
        this.balances = {};
        //
    }
    ngOnInit() {
        const iqKeyboard = IQKeyboardManager.sharedManager();
        iqKeyboard.overrideKeyboardAppearance = true;
        iqKeyboard.keyboardAppearance = 1 /* Dark */;
        this._sideDrawerTransition = new sidedrawer_1.SlideInOnTopTransition();
        this.activatedRoute.params.subscribe((params) => {
            // Todo: implement other pairs
            // core
            // this.marketName = "BTC-" + params['MarketName'];
            this.marketName = params['MarketName'] + "/BTC";
            this.page.on('navigatingTo', (data) => {
                this.marektSubscription = this.watchService.getMarket(this.marketName)
                    .subscribe((market) => {
                    this.market = market;
                    this.mapMarket(market);
                });
                this.watchService.getBalances();
            });
            this.page.on('navigatingFrom', (data) => {
                this.marektSubscription.unsubscribe();
            });
        });
    }
    ngAfterViewInit() {
        //
    }
    populatePrice() {
        // core
        // this.rate = this.market.Bid;
        this.rate = this.market.bid;
    }
    populatePriceAsk() {
        this.rateSell = this.market.Ask;
    }
    // Process / proceed ..
    proceedTransaction() {
        if (!this.quantity || !this.quantitySell) {
            alert("Quantity field cannot be empty");
            return false;
        }
        if (!this.rate || !this.rateSell) {
            alert("Price field cannot be empty");
            return false;
        }
        this.market.type = this.isBuySelected ? 'BUY' : 'SELL';
        this.market.typeString = this.isBuySelected ? 'Limit Buy' : 'Limit Sell';
        this.market.rate = this.isBuySelected ? this.rate : this.rateSell;
        this.market.quantity = this.isBuySelected ? this.quantity : this.quantitySell;
        this.showConfirmationModal();
    }
    onDrawerButtonTap() {
        this.drawerComponent.sideDrawer.showDrawer();
    }
    showConfirmationModal() {
        const options = {
            context: { market: this.market },
            fullscreen: true,
            viewContainerRef: this.vcRef
        };
        this.modal.showModal(market_confirmation_modal_1.MarketConfirmationModalComponent, options).then((res) => {
            // Callback currently does nothing
        });
    }
    selectMainTab(tabId) {
        this.isOpen = tabId;
    }
    selectBuySellTab(buySelected) {
        this.isBuySelected = buySelected;
    }
    onChange($event) {
        // ngModel check simple validator check
    }
    get isBuyTabActive() {
        return this.isBuySelected;
    }
    isActive(tabId) {
        return this.isOpen === tabId;
    }
    calculateSpread() {
        // core
        // this.spread = this.exchange.calculateSpread(this.market.Bid, this.market.Ask);
        this.spread = this.exchange.calculateSpread(this.market.bid, this.market.ask);
    }
    comparePreviousPrice() {
        this.lastPriceOffset = !!(this.marketPrev.last - 0);
        // core
        // this.lastPriceOffset = !!(this.marketPrev.Last - this.market.Last);
    }
    mapMarket(market) {
        this.marketPrev = Object.assign({}, market);
        this.market.BaseVolume = this.market.baseVolume.toString().split(".")[0];
        this.comparePreviousPrice();
        this.market.Last = this.watchService.parseExponential(market.last);
        this.market.Low = this.watchService.parseExponential(market.low);
        this.market.High = this.watchService.parseExponential(market.high);
        this.market.Bid = this.watchService.parseExponential(market.bid);
        this.market.Ask = this.watchService.parseExponential(market.ask);
        this.market.Pair = market.symbol.split("/")[1];
        this.ticker = market.symbol.split("/")[0];
        this.market.MarketName = this.ticker;
        if (this.watchService.balances) {
            if (this.watchService.balances.hasOwnProperty(this.ticker)) {
                this.marketBalance = this.watchService.balances[this.ticker].Balance.toFixed(2);
                if (this.watchService.balances[this.ticker].Balance !==
                    this.watchService.balances[this.ticker].Available) {
                    this.marketBalanceAvailable = this.watchService.balances[this.ticker].Available.toFixed(2);
                }
            }
        }
        this.calculateSpread();
    }
    // Todo: getMax doesn't work well, needs work
    getMax() {
        const fee = 0.001;
        if (!this.rate) {
            this.quantity = 0;
        }
        else {
            // Todo check balance ~ available balance diff in some cases
            this.quantity = +(this.watchService.balances['BTC'].Balance / (this.rate - this.rate * fee)).toFixed(2);
        }
    }
    get sideDrawerTransition() {
        return this._sideDrawerTransition;
    }
    cancelOrder(index) {
        const id = this.watchService.getuuid(index);
        this.watchService.showPoolingModal('Cancelation ', 'Canceling..');
        this.core.cancelOrder(id, this.watchService)
            .subscribe((response) => {
            this.watchService.removeOrderFromMap(id);
            this.watchService.showPoolingModal('The order has been canceled', 'Cancelation ');
        });
    }
};
__decorate([
    core_1.ViewChild("drawer"),
    __metadata("design:type", angular_1.RadSideDrawerComponent)
], MarketComponent.prototype, "drawerComponent", void 0);
MarketComponent = __decorate([
    core_1.Component({
        selector: "Market",
        moduleId: module.id,
        templateUrl: "./market.component.html"
    }),
    __metadata("design:paramtypes", [router_1.Router,
        router_1.ActivatedRoute,
        shared_1.PoolingService,
        shared_1.CoreExchange,
        shared_1.WatchService,
        shared_1.ExchangeService,
        dialogs_1.ModalDialogService,
        core_1.ViewContainerRef,
        page_1.Page])
], MarketComponent);
exports.MarketComponent = MarketComponent;
//# sourceMappingURL=data:application/json;base64,